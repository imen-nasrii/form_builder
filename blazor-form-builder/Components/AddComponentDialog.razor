@using FormBuilderApp.Models
@using MudBlazor
@using Newtonsoft.Json

<MudDialog IsOpen="IsOpen" OnBackdropClick="Cancel">
    <DialogContent>
        <MudText Typo="Typo.h6" Class="mb-4">Ajouter des Composants Externes</MudText>
        
        <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true">
            <MudTabPanel Text="Configuration JSON" Icon="@Icons.Material.Filled.Code">
                <MudTextField @bind-Value="jsonConfig" 
                             Label="Configuration JSON du composant" 
                             Variant="Variant.Outlined" 
                             Lines="10"
                             Placeholder="@jsonPlaceholder"
                             Class="font-family-monospace" />
                
                <div class="d-flex justify-end mt-4">
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Primary" 
                              OnClick="AddFromJson"
                              Disabled="@string.IsNullOrWhiteSpace(jsonConfig)">
                        Ajouter depuis JSON
                    </MudButton>
                </div>
            </MudTabPanel>
            
            <MudTabPanel Text="Créateur Visuel" Icon="@Icons.Material.Filled.Edit">
                <MudForm @ref="form">
                    <MudGrid>
                        <MudItem xs="6">
                            <MudTextField @bind-Value="componentConfig.Name" 
                                         Label="Nom" 
                                         Variant="Variant.Outlined" 
                                         Required="true" />
                        </MudItem>
                        <MudItem xs="6">
                            <MudTextField @bind-Value="componentConfig.Label" 
                                         Label="Label" 
                                         Variant="Variant.Outlined" 
                                         Required="true" />
                        </MudItem>
                        <MudItem xs="6">
                            <MudSelect @bind-Value="componentConfig.Icon" 
                                      Label="Icône" 
                                      Variant="Variant.Outlined">
                                <MudSelectItem Value="@Icons.Material.Filled.Extension">Extension</MudSelectItem>
                                <MudSelectItem Value="@Icons.Material.Filled.Settings">Settings</MudSelectItem>
                                <MudSelectItem Value="@Icons.Material.Filled.Build">Build</MudSelectItem>
                                <MudSelectItem Value="@Icons.Material.Filled.Code">Code</MudSelectItem>
                                <MudSelectItem Value="@Icons.Material.Filled.Widget">Widget</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="6">
                            <MudSelect @bind-Value="componentConfig.Color" 
                                      Label="Couleur" 
                                      Variant="Variant.Outlined">
                                <MudSelectItem Value="primary">Primary</MudSelectItem>
                                <MudSelectItem Value="secondary">Secondary</MudSelectItem>
                                <MudSelectItem Value="success">Success</MudSelectItem>
                                <MudSelectItem Value="info">Info</MudSelectItem>
                                <MudSelectItem Value="warning">Warning</MudSelectItem>
                                <MudSelectItem Value="error">Error</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="componentConfig.PropertiesJson" 
                                         Label="Propriétés (JSON)" 
                                         Variant="Variant.Outlined" 
                                         Lines="5"
                                         Placeholder="@propertiesPlaceholder"
                                         Class="font-family-monospace" />
                        </MudItem>
                    </MudGrid>
                </MudForm>
                
                <div class="d-flex justify-end mt-4">
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Primary" 
                              OnClick="AddFromForm">
                        Créer composant
                    </MudButton>
                </div>
            </MudTabPanel>
        </MudTabs>
    </DialogContent>
    
    <DialogActions>
        <MudButton OnClick="Cancel">Annuler</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }
    [Parameter] public EventCallback<CustomComponent> OnComponentAdded { get; set; }
    
    private MudForm form = new();
    private string jsonConfig = string.Empty;
    
    private ComponentFormModel componentConfig = new();
    
    private readonly string jsonPlaceholder = @"{
  ""name"": ""customInput"",
  ""label"": ""Input Personnalisé"",
  ""icon"": ""extension"",
  ""color"": ""primary"",
  ""properties"": {
    ""placeholder"": ""Texte par défaut"",
    ""validation"": ""required"",
    ""maxLength"": 255
  }
}";

    private readonly string propertiesPlaceholder = @"{
  ""placeholder"": ""Texte par défaut"",
  ""validation"": ""required"",
  ""maxLength"": 255
}";

    private class ComponentFormModel
    {
        public string Name { get; set; } = string.Empty;
        public string Label { get; set; } = string.Empty;
        public string Icon { get; set; } = Icons.Material.Filled.Extension;
        public string Color { get; set; } = "primary";
        public string PropertiesJson { get; set; } = string.Empty;
    }

    private async Task AddFromJson()
    {
        try
        {
            var config = JsonConvert.DeserializeObject<dynamic>(jsonConfig);
            if (config?.name == null || config?.label == null)
            {
                Snackbar.Add("Le nom et le label sont requis dans la configuration JSON", Severity.Error);
                return;
            }

            var component = new CustomComponent
            {
                Id = config.name.ToString().ToUpper(),
                Name = config.name.ToString(),
                Label = config.label.ToString(),
                Icon = config.icon?.ToString() ?? "extension",
                Color = config.color?.ToString() ?? "primary",
                Properties = config.properties != null 
                    ? JsonConvert.DeserializeObject<Dictionary<string, object>>(config.properties.ToString()) ?? new Dictionary<string, object>()
                    : new Dictionary<string, object>(),
                IsCustom = true
            };

            await OnComponentAdded.InvokeAsync(component);
            await Close();
            
            // Reset form
            jsonConfig = string.Empty;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Configuration JSON invalide: {ex.Message}", Severity.Error);
        }
    }

    private async Task AddFromForm()
    {
        await form.Validate();
        if (!form.IsValid || string.IsNullOrWhiteSpace(componentConfig.Name) || string.IsNullOrWhiteSpace(componentConfig.Label))
        {
            Snackbar.Add("Veuillez remplir tous les champs requis", Severity.Warning);
            return;
        }

        try
        {
            var properties = new Dictionary<string, object>();
            if (!string.IsNullOrWhiteSpace(componentConfig.PropertiesJson))
            {
                properties = JsonConvert.DeserializeObject<Dictionary<string, object>>(componentConfig.PropertiesJson) ?? new Dictionary<string, object>();
            }

            var component = new CustomComponent
            {
                Id = componentConfig.Name.ToUpper(),
                Name = componentConfig.Name,
                Label = componentConfig.Label,
                Icon = componentConfig.Icon,
                Color = componentConfig.Color,
                Properties = properties,
                IsCustom = true
            };

            await OnComponentAdded.InvokeAsync(component);
            await Close();
            
            // Reset form
            componentConfig = new ComponentFormModel();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Format JSON invalide dans les propriétés: {ex.Message}", Severity.Error);
        }
    }

    private async Task Cancel()
    {
        await Close();
    }

    private async Task Close()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(IsOpen);
    }
}